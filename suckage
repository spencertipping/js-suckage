#!/usr/bin/perl

my $line          = 0;
my $file          = undef;
my $total_suckage = 0;

sub sucks_because {s/^\s*//; printf "[\033[1;31msuckage at %s:%3d\033[0;0m] \033[1;32m%s\033[0;0m\n :: \033[1;33m$_[0]\033[0;0m\n\n", $file, $line, $_}

sub detect_suckage {
  ++$total_suckage;
  s/\/\/.*$//;
  s/"([^"\\]|\\.)*"/(a_string)/g;
  s/'([^'\\]|\\.)*'/(a_string)/g;

  sucks_because 'Loop uses a nonlocal variable (add "var")'                                                  if /\bfor\s*\(\s*(?!var)/;
  sucks_because 'Loop does too much work per comparison (store lengths in locals for better performance)'    if /\bfor\s*\([^;]+;\s*\w+\s*<=?(?!\s*\w+;)/;
  sucks_because 'Numeric cast may produce NaN (use || 0 to failover to zero in this case)'                   if /\bNumber\([^)]*\)(?!\s*\|\|)/;
  sucks_because 'Condition is inaccurate for built-in methods such as toString (verify with hasOwnProperty)' if /if\s*\([^()]+\[\s*\w+\s*\]\s*\)/;
  sucks_because 'Array literal [] should be used'                                                            if /new\s+Array\b/;
  sucks_because 'Object literal {} should be used'                                                           if /new\s+Object\b/;
  sucks_because '== is a lame measure of equality; === is better'                                            if /[^=!]==[^=]\s*(?!null)/;
  sucks_because 'x.constructor is more useful than typeof x in this case'                                    if /\btypeof\s+\w+\s+(?![=!]==?\s*\(a_string\))/;
  sucks_because 'x instanceof String is true only in pathological cases (use .constructor)'                  if /\binstanceof\s+String\b/;
  sucks_because 'x instanceof Number is true only in pathological cases (use .constructor)'                  if /\binstanceof\s+Number\b/;
  sucks_because 'x instanceof Boolean is true only in pathological cases (use .constructor)'                 if /\binstanceof\s+Boolean\b/;
  sucks_because '"this" is always true'                                                                      if /\bif\s*\(this(\s*==\s*true)?\)/ || /return\s+this\s*(\|\||&&)/;
  sucks_because '.call() is clearer for a predetermined number of arguments'                                 if /\.apply\s*\([^,]+,\s*\[[^\]]+\]\)/;
  sucks_because '"function name ()" is nonstandard in expression context (remove name for proper lambda)'    if /[=\(]\s*function\s*\w+/;
  sucks_because 'Javascript might insert a semicolon here, depending on surrounding context'                 if /[\]\w]$/;
  sucks_because 'eval()? Seriously?'                                                                         if /\beval\s*\(/;
  sucks_because 'Only Error objects have stack traces (use new Error(x) to spend less time debugging)'       if /throw\s*['"\d]/;
}

@ARGV or exit print <<EOF;
Usage: $0 file.js
EOF

for (@ARGV) {
  $line = 0;
  open my $fh, '<', $file = $_;
  ++$line, chomp, detect_suckage while <$fh>;
  close $fh;
}

print " :: \033[1;34mNo suckage found\033[0;0m\n" unless $total_suckage;
